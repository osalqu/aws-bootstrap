AWSTemplateFormatVersion: 2010-09-09

Parameters:
  EC2InstanceType:
    Type: String
  EC2AMI:
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'

Resources:

  SecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: !Sub 'Internal Security group for ${AWS::StackName}'
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName
  InstanceRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          Effect: Allow
          Principal:
            Service:
              - "ec2.amazonaws.com"
          Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/CloudWatchFullAccess
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName
  InstanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      Roles:
        - Ref: InstanceRole
  Instance:
    Type: AWS::EC2::Instance
    CreationPolicy: 
      ResourceSignal:
        Timeout: PT15M
        Count: 1
    Metadata:
      AWS::CloudFormation::Init:
        config:
          packages: 
            yum:
              wget: []
              unzip: []
    Properties:
      ImageId: !Ref EC2AMI
      InstanceType: !Ref EC2InstanceType
      IamInstanceProfile: !Ref InstanceProfile
      Monitoring: true
      SecurityGroupIds:
        - !GetAtt SecurityGroup.GroupId 
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          set -euo pipefail
          trap 'echo "Error on line $LINENO"; exit 1' ERR
          
          exec > >(tee /var/log/userdata.log|logger -t userdata) 2>&1
          
          # Validate AWS metadata
          if ! curl -s http://169.254.169.254/latest/meta-data/ >/dev/null; then
            echo "AWS metadata service unavailable. Exiting."
            exit 1
          fi
          
          # Retry function
          function retry {
            local n=0
            local max=5
            local delay=10
            while true; do
              "$@" && break || {
                if [[ $n -lt $max ]]; then
                  ((n++))
                  echo "Command failed. Attempt $n/$max. Retrying in $delay seconds..."
                  sleep $delay
                else
                  echo "The command has failed after $n attempts."
                  return 1
                fi
              }
            done
          }
          
          # Update packages
          retry yum -y update
          
          # Install dependencies
          retry yum install -y aws-cfn-bootstrap curl unzip
          
          # Run cfn-init
          /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --region ${AWS::Region} --resource Instance || { echo "cfn-init failed"; exit 1; }
          
          # Node.js environment setup
          if ! curl https://raw.githubusercontent.com/nvm-sh/nvm/v0.34.0/install.sh | bash; then
            echo "Failed to install NVM. Exiting."
            exit 1
          fi
          
          source /home/ec2-user/.nvm/nvm.sh
          retry nvm install v12.7.0
          nvm alias default v12.7.0
          nvm use v12.7.0
          
          # Deploy application
          retry wget https://github.com/<username>/aws-bootstrap/archive/master.zip -O /tmp/master.zip
          unzip /tmp/master.zip -d /home/ec2-user || { echo "Failed to unzip application"; exit 1; }
          mv /home/ec2-user/aws-bootstrap-master /home/ec2-user/app
          mkdir -p /home/ec2-user/app/logs
          
          # Run application
          cd /home/ec2-user/app
          retry npm install
          retry npm start
          
          # Signal CloudFormation
          /opt/aws/bin/cfn-signal -e 0 --stack ${AWS::StackName} --region ${AWS::Region} --resource Instance
          echo "UserData script completed successfully."
          
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName

Outputs:
  InstanceEndpoint:
    Description: The DNS name for the created instance
    Value: !Sub "http://${Instance.PublicDnsName}:8080" 
    Export:
      Name: InstanceEndpoint