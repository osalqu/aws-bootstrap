AWSTemplateFormatVersion: 2010-09-09

Parameters:
  EC2InstanceType:
    Type: String
  EC2AMI:
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'

Resources:

  SecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: !Sub 'Internal Security group for ${AWS::StackName}'
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName
  InstanceRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          Effect: Allow
          Principal:
            Service:
              - "ec2.amazonaws.com"
          Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/CloudWatchFullAccess
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName
  InstanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      Roles:
        - Ref: InstanceRole
  Instance:
    Type: AWS::EC2::Instance
    CreationPolicy: 
      ResourceSignal:
        Timeout: PT15M
        Count: 1
    Metadata:
      AWS::CloudFormation::Init:
        config:
          packages: 
            yum:
              wget: []
              unzip: []
    Properties:
      ImageId: !Ref EC2AMI
      InstanceType: !Ref EC2InstanceType
      IamInstanceProfile: !Ref InstanceProfile
      Monitoring: true
      SecurityGroupIds:
        - !GetAtt SecurityGroup.GroupId 
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          exec > >(tee /var/log/userdata.log|logger -t userdata) 2>&1
          set -euo pipefail
          trap 'echo "Error on line $LINENO"; exit 1' ERR
      
          # Retry function for YUM lock handling
          function retry_with_yum_unlock {
            local n=0
            local max=5
            local delay=10
            while true; do
              if yum -y "$@" 2>/dev/null; then
                break
              else
                echo "YUM lock detected. Retrying in $delay seconds..."
                sleep $delay
                ((n++))
                if [ $n -ge $max ]; then
                  echo "Failed due to persistent YUM lock."
                  exit 1
                fi
              fi
            done
          }
      
          # Update packages
          retry_with_yum_unlock update
      
          # Install dependencies
          retry_with_yum_unlock install -y aws-cfn-bootstrap curl unzip
      
          # Run cfn-init
          /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --region ${AWS::Region} --resource Instance || { echo "cfn-init failed"; exit 1; }
      
          # Install NVM and Node.js as ec2-user
          su - ec2-user -c "curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.34.0/install.sh | bash"
          su - ec2-user -c "export NVM_DIR='/home/ec2-user/.nvm' && \
            [ -s '$NVM_DIR/nvm.sh' ] && . '$NVM_DIR/nvm.sh' && \
            nvm install v12.7.0 && nvm alias default v12.7.0 && nvm use v12.7.0"
      
          # Deploy application
          su - ec2-user -c "mkdir -p /home/ec2-user/app && cd /home/ec2-user/app && \
            wget https://github.com/<username>/aws-bootstrap/archive/master.zip -O app.zip && \
            unzip app.zip && mv aws-bootstrap-master/* . && npm install && npm start"
      
          # Signal CloudFormation
          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --region ${AWS::Region} --resource Instance

Outputs:
  InstanceEndpoint:
    Description: The DNS name for the created instance
    Value: !Sub "http://${Instance.PublicDnsName}:8080" 
    Export:
      Name: InstanceEndpoint